#!/usr/bin/perl
#-------------------------------------------------------------#
# Creation d'une instance PostgreSQL et des scripts associés  #
#-------------------------------------------------------------#
use File::Copy;
use IO::Socket::INET;

my $majorVersion="9.6";
my $date_exec = `date '+%Y%m%d'`;
my $suffixe = `date '+%Y%m%d%H%M%S'`;
chomp($suffixe);
my $fic_in_svc="modeles/postgresql-template.service";
my $fic_in_pgsql="modeles/postgresql.modele";
my $fic_out_pgsql="postgresql.conf.tmp";
my $fic_out_svc="service.tmp";
my $fic_new_svc="service.new";
my $fic_in_cfgdb="/custom/system/dbpostgres.inv";
my $fic_out_cfgdb="/custom/system/dbpostgres.inv.new";
my %dbh = {};
my $firstPort = 5432;
my $lastPort = 5633;


my $repSetup = "/custom/system/setup";
my $instance = "instance";
my $repService = "/etc/systemd/system";
my $prefixeService = "postgresql-";
my $repertoireConfig = "/etc/pgsql/config";
my $repertoireLog = "/custom/log/pgsql/".$majorVersion;
my $repertoireData = "/custom/data/pgsql/".$majorVersion;
my $repModeles = "/custom/system/setup/modeles";
my $repModelesInstances = $repModeles."/".$instance;
my $compteService = "postgres";
my $groupeService = "postgres";
my $description="description instance";
my $nomService = "postgresql-".$instance;
my $repData = "";
my $repLog = "";
my $trace=0;

my $hostname="127.0.0.1";
my $portEcoute="5432";



sub creeRepertoires{
    my $fct = "creeRepertoires";
    my $cmde1 ="/bin/mkdir -p ".$repertoireConfig;
    if (-e $repertoireConfig and -d $repertoireConfig) {
        ecrisLog($fct,"Le repertoire :".$repertoireConfig." existe","OK");
    } else {
        my $r1 = qx{$cmde1};
        my $cmde1a = "/bin/chown -R postgres:postgres ".$repertoireConfig; 
        my $r1a = qx{$cmde1a};
        my $cmde1b = "/bin/chmod -R 775 ".$repertoireConfig; 
        my $r1b = qx{$cmde1b};
    }
    if (-e $repertoireLog and -d $repertoireLog) {
        ecrisLog($fct,"Le repertoire :".$repertoireLog." existe","OK");
    } else {
        my $cmde2 ="/bin/mkdir -p ".$repertoireLog;
        my $r2 = qx{$cmde2};
        my $cmde2a = "/bin/chown -R postgres:postgres ".$repertoireLog; 
        my $r2a = qx{$cmde2a};
        my $cmde2b = "/bin/chmod -R 775 ".$repertoireLog; 
        my $r2b = qx{$cmde2b};
    }
    if (-e $repertoireData and -d $repertoireData) {
        ecrisLog($fct,"Le repertoire :".$repertoireData." existe","OK");
    } else {
        my $cmde3 ="/bin/mkdir -p ".$repertoireData;
        my $r3 = qx{$cmde3};
        my $cmde3a = "/bin/chown -R postgres:postgres ".$repertoireData; 
        my $r3a = qx{$cmde3a};
        my $cmde3b = "/bin/chmod -R 775 ".$repertoireData; 
        my $r3b = qx{$cmde3b};
    }
}

sub verifieUser{
    my $user = shift;
    my $fct = "verifieUser";
    my $cmde = sprintf("/usr/bin/getent passwd %s",$user);
    my $res = qx{$cmde};
    my $resultat = length($res); 
    if($resultat > 0) {
        ecrisLog($fct,"Le compte:".$user." existe","OK");
    } else {
        ecrisLog($fct,"Le compte:".$user." n'existe pas","ERREUR");
        ecrisFinLog();
        printf("ERREUR : le compte %15s doit avoir ete cree avant de lancer ce script\n",$user);
        exit(2);
    }
}

sub imprimeSynthese {
    printf("#--------------------------------------------------------------------------------------------------------#\n");
    printf("| Instance PostgreSQL : %-80s |\n",$description);
    printf("|--------------------------------------------------------------------------------------------------------#\n");
    printf("| Nom de l'instance....................: %-63s |\n",$instance);
    printf("| Adresse IP du serveur hebergeur......: %-63s |\n",$hostname);
    printf("| Port d'ecoute de l'instance..........: %-63s |\n",$portEcoute);
    printf("| Repertoire hebergeant les donnees....: %-63s |\n",$repData);
    printf("| Repertoire hebergeant les logs.......: %-63s |\n",$repLog);
    printf("| Compte owner de l'instance...........: %-63s |\n",$compteService);
    printf("| Start / Stop de l'instance via cmde..: systemctl {start|stop|status|restart} %-26s |\n",$nomService);
    printf("#--------------------------------------------------------------------------------------------------------#\n");
}


sub saisieParametres {
    my $saisie = 'X';
    print("#---------------------------------------------------------------#\n");
    print("# Ce script permet de creer une instance PostgreSQL             #\n");
    print("#---------------------------------------------------------------#\n");
    while(!(( $saisie =~ /O.*/) || ( $saisie =~ /N.*/))) {
        print("# Entrer le nom de l'instance..........................: ");chomp($instance = <STDIN>);
        print("# Entrer l'adresse IP du serveur hebergeant l'instance.: ");chomp($hostname = <STDIN>);
        print("# Entrer une description de l\'instance................ : ");chomp($description = <STDIN>);
        print("# Entrer le compte owner de l\'instance................ : ");chomp($compteService = <STDIN>);
        $nomService = $prefixeService.$instance;
        $repData = $repertoireData."/".$instance;
        $repLog = $repertoireLog."/".$instance;
        $portEcoute = attribuePortLibre($instance,$compteService,$description);
        print("#-----------------------------------------------------------------------------------#\n");
        print("# Nom de l'instance....................................: $instance\n");
        print("# Adresse IP du serveur hebergeant l'instance..........: $hostname\n");
        print("# Port d'ecoute de l'instance..........................: $portEcoute\n");
        print("# Description succincte de l'instance..................: $description\n");
        print("# Repertoire de données................................: $repData\n");
        print("# Repertoire de logs...................................: $repLog\n");
        print("# Compte de service utilise pour le lancement..........: $compteService\n");
        print("#-----------------------------------------------------------------------------------#\n");
        print("# Validez-vous ces donnees (O/N) ? :");chomp($saisie = <STDIN>);
    }
    return( $saisie =~ /O.*/);
}

sub enregistreFichierConfig {
    my $tableau = shift;
    my $fct = "enregistreFichierCfg";
    my $nbLignes = 0;
    my @listeTriee = sort keys %{$tableau};
    open(FILE_OUT_CFG,">",$fic_out_cfgdb) or die "ERREUR ouverture fichier :".$fic_out_cfgdb.": $!";
    foreach $a (@listeTriee ) {
        my $l = length($tableau->{$a}{port});
        if ($l > 0) {
            $nbLignes++;
            printf FILE_OUT_CFG ("%s;%s;%s;%s;\n",$tableau->{$a}{port},$tableau->{$a}{database},$tableau->{$a}{owner},$tableau->{$a}{description});
            ($trace)? printf ("%-5s:%-10s:%-10s:%-40s\n",$tableau->{$a}{port},$tableau->{$a}{database},$tableau->{$a}{owner},$tableau->{$a}{description}):();
        }
    }
    close(FILE_OUT_CFG);
    ecrisLog($fct,"ecriture:".$fic_out_cfgdb,$nbLignes." entrees","");
}# imprimeTableau

sub lisConfigDb{
    my $fct="lisConfigDb";
    my $nbLignes = 0;
    open(FILE_IN_CFG,$fic_in_cfgdb) or die "ERREUR ouverture fichier :".$fic_in_cfgdb.": $!";
    my @contenu = <FILE_IN_CFG>;
    close(FILE_IN_CFG);
    foreach my $ligne (@contenu) {
        $nbLignes++;
        chomp($ligne);
        ($port,$db,$owner,$description) = split(/;/,$ligne);
        $dbh{$port}{'database'} = $db;
        $dbh{$port}{'port'} =      $port,
        $dbh{$port}{'owner'} =     $owner,
        $dbh{$port}{'description'} = $description,
    }
    ecrisLog($fct,"lecture:".$fic_in_cfgdb,$nbLignes." entrees","");
}

#-----------------------------------------------------------------------------------------------#
# Lecture du fichier d'inventaire et extraction du premier port non affecté                     #
# Vérification que ce port est effectivement libre, i.e. pas en mode LISTEN                     # 
# Si OK, le port est affecté et le fichier d'inventaire est mis à jour en mémoire               #
#-----------------------------------------------------------------------------------------------#
sub attribuePortLibre{
    my $database = shift;
    my $owner = shift;
    my $description = shift;
    my $fct="attribuePortLibre";
    my @listePort = sort keys %dbh;
    my $freePort = $firstPort;
    my $resultat = 0;
    my $portFound = 0;
    my $nbNonInvent=0;
    while(($portFound <= 0) && ($freePort <= $lastPort)) {
       ($trace)? printf("Analyse du port : %5s\n",$freePort):();
       if($dbh{$freePort}) {
           ($trace)? printf("Analyse du port : %5s : Existe deja\n",$freePort):();
           $freePort++;
       } else {
           ($trace)? printf("Analyse du port : %5s : N'existe pas -> attribution\n",$freePort):();
           my $cmde = sprintf("/bin/netstat -anp | grep %s | grep LISTEN | wc -l",$freePort);
           my $r = qx{$cmde};
           ($trace)? printf("Resultat de la recherche : %d\n",$r):();
           if($r <= 0) {
               $dbh{$freePort}{'database'} = $database;
               $dbh{$freePort}{'port'} =      $freePort;
               $dbh{$freePort}{'owner'} =     $owner;
               $dbh{$freePort}{'description'} = $description;
               $portFound++;
               $resultat = $freePort;
           } else {
               $dbh{$freePort}{'port'} =      $freePort;
               $dbh{$freePort}{'description'} = "Attention port non inventorie";
               $nbNonInvent++;
               $freePort++;
           }
       }
    }
    ecrisLog($fct,"Ports occupes non inventories",$nbNonInvent,"");
    ecrisLog($fct,"Port disponible affecte",$resultat,"");
    return($resultat);
}

sub requetePackage {
    $package = shift();
    $etat = shift();
    my $fct="requetePackage";
    $res = 0;
    if ( $etat eq 0 ) {
        ($trace)? print("\tPresence package installe : $package\n"):();
        my $cmde = sprintf("yum list installed %s | grep %s | tr -s \" \" \";\"",$package,$package);
        #$listePackages = (`yum list installed $package | grep $package | tr -s " " ";"`);
        $listePackages = qx{$cmde};
    } else {
        ($trace)? print("\tPresence package disponible : $package\n"):();
        my $cmde = sprintf("yum list available %s | grep %s | tr -s \" \" \";\"",$package,$package);
        #$listePackages = (`yum list available $package | grep $package | tr -s " " ";"`);
        $listePackages = qx{$cmde};
    }
    foreach ($listePackages) {
        ($trace)? print("$_\n"):();
        if ( $_ =~ m/([a-zA-Z0-9\-\_\.]+)\;([a-zA-Z0-9\-\_\.]+)\;([.]*)/) {
            ($trace)? print("$_:$2:installe\n"):();
            my $versionLue = $2;
            chomp($versionLue);
            #if ( $2 =~ m/([0-9]+)\.([0-9]+)[\.([.]*)/) {
            if ( $2 =~ m/([0-9]+)[\.\-]([0-9]+)([.]*)/) {
                $res = sprintf("%d%d;%s",$1,$2,$versionLue);
            }
        }
    }
    ecrisLog($fct,"Package :".$package,$res,"");
    return($res);
}

sub verifiePackage {
    $package = shift();
    $disposition = shift();
    my $fct = "verifiePackage";
    my $installe = requetePackage($package,0);
    my ($instNum,$instString) = split(";",$installe);
    my $disponible = requetePackage($package,1);
    my ($dispNum,$dispString) = split(";",$disponible);
    my $message = sprintf("pkg[$package]:Installe[$instString], Disponible[$dispString]");
    if (($disposition > 0) && ($dispNum > $instNum)) {
        my $cmde = "/usr/bin/yum install ".$package;
        my $res = qx{$cmde};
        ($trace)? print("Resultat = $res\n"):();
    } else {
        ($trace)? print("pkg[$package]:Installe[$instString], Disponible[$dispString]\n"):();
    }
    ecrisLog($fct,$message,$res,"");
}


sub relivreFichier{
    $ancien = shift();
    $nouveau = shift();
    my $fct = "relivreFichier";
    my $resultat = 0;
    if ( -f $ancien ) {
       ecrisLog($fct,"Renommage fichier:".$ancien,$resultat);
       $resultat = copy($ancien,$repSave."/".$ancien."_".$suffixe);
    }
    if ( -f $nouveau) {
        $resultat = copy($nouveau,$ancien);
        ecrisLog($fct,"Remplacement par :".$nouveau,$resultat);
    }
    return($resultat);
}

sub ecrisFinLog{
     printf LOG ("#----------------------*------------------------*----------------------------------------------------------------------*--------------------------------#\n");
}

sub ecrisEnteteLog{
     printf LOG ("#----------------------*------------------------*----------------------------------------------------------------------*--------------------------------#\n");
     printf LOG ("|    DATE et HEURE     |         MODULE         |                        OPERATION EFFECTUEE                           |             RESULTAT           |\n");
     printf LOG ("|----------------------|------------------------|----------------------------------------------------------------------|--------------------------------|\n");
}
sub ecrisLog{
    my $fct = shift;
    my $operation = shift;
    my $resultat = shift;
    my $date_heure = `date '+%Y%m%d-%H:%M:%S'`;
    chomp($date_heure);
    printf LOG ("| %-20s | %-22s | %-68s | %-30s |\n",$date_heure,$fct,$operation,$resultat);
}
sub ecrisDebutLigne{
    my $fct = shift;
    my $operation = shift;
    my $date_heure = `date '+%Y%m%d-%H:%M:%S'`;
    chomp($date_heure);
    printf LOG ("| %-20s | %-22s | %-68s | ",$date_heure,$fct,$operation);
}


sub genereFichierService {
    my $instance = shift;
    my $fct = "genereFichierService";
    my $resultat = 0;
    #-------------------------------------------------------------#
    #   Ouverture du fichier a modifier et chargement en memoire  #
    #-------------------------------------------------------------#
    open(FILE_IN_SVC,$fic_in_svc) or die "ERREUR ouverture fichier :".$fic_in_svc.": $!"; 
    my @contenu = <FILE_IN_SVC>; 
    close(FILE_IN_SVC); 

    #-------------------------------------------------------------#
    #  Ouverture du fichier destine a contenir les modifications  #
    #-------------------------------------------------------------#
    open(FILE_OUT_SVC,">$fic_out_svc")or die "ERREUR ouverture fichier :".$fic_out_svc.": $!"; 
    foreach my $ligne (@contenu) {
        #---------------------------------------------------------#
        # MODIFICATIONS DES LIGNES VIA REGEXP                     #
        #---------------------------------------------------------#
        if ( $ligne =~ m/NOM_INSTANCE/ ) {
           $ligne =~ s/NOM_INSTANCE/$instance/;
        }
        if ( $ligne =~ m/USER_OWNER/ ) {
           $ligne =~ s/USER_OWNER/$compteService/;
        }
        if ( $ligne =~ m/GROUP_OWNER/ ) {
           $ligne =~ s/GROUP_OWNER/$groupeService/;
        }
        #---------------------------------------------------------#
        # FIN DES MODIFICATIONS                                   #
        #---------------------------------------------------------#
        # Suppression du saut en fin de ligne                     #
        #---------------------------------------------------------#
        chomp $ligne;
        print FILE_OUT_SVC "$ligne\n" or die "ERREUR ecriture fichier :".$fic_out.": $!";
    }
    #-------------------------------------------------------------#
    #   Fermeture du fichier de sortie                            #
    #-------------------------------------------------------------#
    close(FILE_OUT_SVC) or die "ERREUR fermeture fichier :".$fic_out_svc.": $!";; 
    #-------------------------------------------------------------#
    # Copie du fichier genere sous /etc/init.d/${APPLI}.new       #
    #-------------------------------------------------------------#
    $fic_new_svc=$repService."/".$nomService.".service";
    if ( -f $fic_new_svc ) {
        ecrisLog($fct,"copie fichier".$fic_new_svc,"fichier existe, ARRET");
        $resultat = 1;
    } else {
        copy($fic_out_svc,$fic_new_svc) or die "ERREUR lors de la copie du fichier :".$fic_out_svc.": $!";
        $resultat = system("chmod 755 $fic_new_svc");
        ecrisLog($fct,"chmod 755 ".$fic_new_svc,$resultat,"");
    }
    return($resultat);
}

sub creationRep{
    my $repRacine = shift;
    my $instance = shift;
    my $fct="creationRep";
    my $resultat = 0;
    my $repertoire = $repRacine."/".$instance;
    if( -d $repertoire ) {
        ecrisLog($fct,"creation rep ".$repertoire,"EXISTE DEJA, ERREUR");
        $resultat = 1;
    } else {
        $resultat = system("mkdir -p $repertoire");
        ecrisLog($fct,"creation rep ".$repertoire,$resultat);
        $resultat2 = system("chown -R ".$compteService.":".$groupeService." ".$repertoire);
        ecrisLog($fct,"chown rep ".$repertoire,$resultat2);
    }
    return $resultat;
}

sub initialisationInstance{
    my $instance = shift;
    my $fct = "initialisationInstance";
    my $service = $repService."/".$prefixeService.$instance;
    #my $setupCmde = $repSetup."/postgresql96-setup initdb -D ".$instance;
    my $setupCmde = sprintf("%s/postgresql96-setup initdb -I %s -O %s -G %s",$repSetup,$instance,$compteService,$groupeService);
    my $resultat = 1;
    my $res = 1;
    ecrisLog($fct,"cmde ".$setupCmde,"DEBUT");
    $resultat = qx{$setupCmde};
    $resultat =~ s/[^[:alnum:] !\[\]]//g;
    chomp($resultat);
    if ( $resultat =~ m/.*OK.*/) {
        $resultat = "OK";
        $res = 0;
    } elsif ($resultat =~ m/(.*)\!/) {
        $resultat = $1;
    }
    ecrisLog($fct,"cmde ".$setupCmde,$resultat);
    return($res);
} 

sub demarreInstance{
    my $instance = shift;
    my $fct = "demarreInstance";
    my $service = $prefixeService.$instance;
    my $resultat = 1;
    my $res = 1;
    my $cmde = "systemctl start ".$service;
    ecrisLog($fct,"cmde ".$cmde,"DEBUT");
    $resultat = qx{$cmde};
    $resultat =~ s/[^[:alnum:] !\[\]]//g;
    chomp($resultat);
    if ( $resultat =~ m/.*OK.*/) {
        $resultat = "OK";
        $res = 0;
    } elsif ($resultat =~ m/(.*)\!/) {
        $resultat = $1;
    }
    ecrisLog($fct,"cmde ".$cmde,$resultat);
    return($res);
}

sub modifieConfigInstance{
    my $instance = shift;
    my $fct = "modifieConfigInstance";
    my $resultat = 0;
    #-------------------------------------------------------------#
    #   Ouverture du fichier a modifier et chargement en memoire  #
    #-------------------------------------------------------------#
    my $fic_in_cfg_inst = $repModelesInstances."/postgresql.conf";
    my $fic_out_cfg_inst = "postgresql.conf.inst.new";
    open(FILE_IN,$fic_in_cfg_inst) or die "ERREUR ouverture fichier :".$fic_in_cfg_inst.": $!";
    my @contenu = <FILE_IN>;
    close(FILE_IN);

    #-------------------------------------------------------------#
    #  Ouverture du fichier destine a contenir les modifications  #
    #-------------------------------------------------------------#
    open(FILE_OUT,">$fic_out_cfg_inst")or die "ERREUR ouverture fichier :".$fic_out_cfg_inst.": $!";
    ($trace)? print("FILE_OUT = $fic_out_cfg_inst\n"):();
    foreach my $ligne (@contenu) {
        ($trace)? print("Ligne : $ligne"):();
        #---------------------------------------------------------#
        # MODIFICATIONS DES LIGNES VIA REGEXP                     #
        #---------------------------------------------------------#
        #listen_addresses = 'localhost,LSTN_HOSTNAME'    
        #port = PORT_ECOUTE 
        if ( $ligne =~ m/NOM_INSTANCE/ ) {
           ($trace)? print("Modification ligne : $ligne\n"):();
           $ligne =~ s/NOM_INSTANCE/$instance/;
        }
        if ( $ligne =~ m/LSTN_HOSTNAME/ ) {
           ($trace)? print("Modification ligne : $ligne\n"):();
           $ligne =~ s/LSTN_HOSTNAME/$hostname/;
        }
        if ( $ligne =~ m/PORT_ECOUTE/ ) {
           ($trace)? print("Modification ligne : $ligne\n"):();
           $ligne =~ s/PORT_ECOUTE/$portEcoute/;
        }
        #---------------------------------------------------------#
        # FIN DES MODIFICATIONS                                   #
        #---------------------------------------------------------#
        # Suppression du saut en fin de ligne                     #
        #---------------------------------------------------------#
        chomp $ligne;
        print FILE_OUT "$ligne\n" or die "ERREUR ecriture fichier :".$fic_out_pgsql.": $!";
    }
    #-------------------------------------------------------------#
    #   Fermeture du fichier de sortie                            #
    #-------------------------------------------------------------#
    close(FILE_OUT) or die "ERREUR fermeture fichier :".$fic_out_pgsql.": $!";;
    #-------------------------------------------------------------#
    # Copie du fichier genere sous /custom/data.............      #
    #-------------------------------------------------------------#
    my $fichierCible = $repertoireConfig."/".$instance."/postgresql.conf";
    $resultat = relivreFichier($fichierCible,$fic_out_cfg_inst);
    ecrisLog($fct,"copie fichier".$fichierCible,$resultat);
    return($resultat);
}

sub modifieConfig{
    my $instance = shift;
    my $fichier = shift;
    my $fct = "modifieConfig";
    my $resultat = 0;
    #-------------------------------------------------------------#
    #   Ouverture du fichier a modifier et chargement en memoire  #
    #-------------------------------------------------------------#
    my $fic_in_cfg = $repModeles."/".$fichier;
    my $fic_out_cfg = $fichier.".new";
    open(FILE_IN,$fic_in_cfg) or die "ERREUR ouverture fichier :".$fic_in_cfg.": $!";
    my @contenu = <FILE_IN>;
    close(FILE_IN);

    #-------------------------------------------------------------#
    #  Ouverture du fichier destine a contenir les modifications  #
    #-------------------------------------------------------------#
    open(FILE_OUT,">$fic_out_cfg")or die "ERREUR ouverture fichier :".$fic_out_cfg.": $!";
    ($trace)? print("FILE_OUT = $fic_out_cfg\n"):();
    foreach my $ligne (@contenu) {
        ($trace)? print("Ligne : $ligne"):();
        #---------------------------------------------------------#
        # MODIFICATIONS DES LIGNES VIA REGEXP                     #
        #---------------------------------------------------------#
        #listen_addresses = 'localhost,LSTN_HOSTNAME'
        #port = PORT_ECOUTE
        if ( $ligne =~ m/NOM_INSTANCE/ ) {
           ($trace)? print("Modification ligne : $ligne\n"):();
           $ligne =~ s/NOM_INSTANCE/$instance/;
        }
        if ( $ligne =~ m/LSTN_HOSTNAME/ ) {
           ($trace)? print("Modification ligne : $ligne\n"):();
           $ligne =~ s/LSTN_HOSTNAME/$hostname/;
        }
        if ( $ligne =~ m/PORT_ECOUTE/ ) {
           ($trace)? print("Modification ligne : $ligne\n"):();
           $ligne =~ s/PORT_ECOUTE/$portEcoute/;
        }
        #---------------------------------------------------------#
        # FIN DES MODIFICATIONS                                   #
        #---------------------------------------------------------#
        # Suppression du saut en fin de ligne                     #
        #---------------------------------------------------------#
        chomp $ligne;
        print FILE_OUT "$ligne\n" or die "ERREUR ecriture fichier :".$fic_out_cfg.": $!";
    }
    #-------------------------------------------------------------#
    #   Fermeture du fichier de sortie                            #
    #-------------------------------------------------------------#
    close(FILE_OUT) or die "ERREUR fermeture fichier :".$fic_out_cfg.": $!";;
    #-------------------------------------------------------------#
    # Copie du fichier genere sous /custom/data.............      #
    #-------------------------------------------------------------#
    my $fichierCible = $repertoireData."/".$instance."/".$fichier;
    $resultat = relivreFichier($fichierCible,$fic_out_cfg);
    ecrisLog($fct,"copie fichier".$fichierCible,$resultat);
    return($resultat);
}

sub packages {
    ($trace)? print("#-----------------------------------------------------------------------#\n"):();
    ($trace)? print("#                        SECTION PACKAGES                               #\n"):();
    ($trace)? print("#-----------------------------------------------------------------------#\n"):();
    ($trace)? print("# Verification de l'installation des modules supplementaires            #\n"):();
    ($trace)? print("#-----------------------------------------------------------------------#\n"):();
    verifiePackage("powa_96",1);
    verifiePackage("pg_qualstats96",1);
    verifiePackage("pg_stat_kcache96",1);
    verifiePackage("hypopg_96",1);
}

sub createUser {
    my $user = shift;
    my $userid = shift;
    my $fct="createUser";
    my $cmde = sprintf("/usr/bin/getent passwd %s || /usr/sbin/useradd  -u %d -g %s -G access,prod -c \"FR/C///Utilisateur applicatif %s\" %s",$user,$userid,$groupeService,$user,$user);
    $resultat = qx{$cmde};
}

sub setupPowa {
    my $instance = shift;
    my $port = shift;
    my $fct = "setupPowa";
    
    my $cmde = sprintf("su - %s -c 'psql -p %s -d postgres -f /custom/system/setup/modeles/setup-powa'",$compteService,$port);
    $resultat = qx{$cmde};
    ($trace)? print("Resultat : $resultat\n"):();
    ecrisLog($fct,"setup powa",$resultat);
    return($resultat);
}

sub verifieInstallation {
    my $repdata = shift;
    my $replog = shift;
    my $repconfig = shift;
    my $repsvc = shift;
    
    my $cmde1 = sprintf("/bin/ls -als %s | /bin/grep %s",$repdata,$instance);
    my $r1 = qx{$cmde1};
    printf("Repertoire data   : %s\n",$r1);
    my $cmde2 = sprintf("/bin/ls -als %s | /bin/grep %s ",$replog,$instance);
    my $r2 = qx{$cmde2};
    printf("Repertoire log    : %s\n",$r2);
    my $cmde3 = sprintf("/bin/ls -als %s | /bin/grep %s ",$repconfig,$instance);
    my $r3 = qx{$cmde3};
    printf("Repertoire config : %s\n",$r3);
    my $cmde4 = sprintf("/bin/ls -als %s | /bin/grep %s ",$repsvc,$instance);
    my $r4 = qx{$cmde4};
    printf("Repertoire service: %s\n",$r4);
    my $cmde5 = sprintf("/bin/grep %s %s",$instance,$fic_in_cfgdb);
    my $r5 = qx{$cmde5};
    printf("Ligne inventaire  : %s\n",$r5);
}

sub positionneAcces {
    my $rep = shift;
    my $owner = shift;
    my $group = shift;
    my $droits = shift;
    my $error = 0;

    my $l = length($rep); ($l<10)? $error=1:(); 
    my $l = length($owner); ($l<5)? $error=2:(); 
    my $l = length($group); ($l<5)? $error=3:(); 
    my $l = length($droits); ($l<3)? $error=4:(); 
    if($error eq 0) { 
        my $changeOwner = sprintf("chown -R %s:%s %s",$owner,$group,$rep);
        my $r1 = qx{$changeOwner};
        my $changeAcces = sprintf("chmod -R %s %s",$droits,$rep);
        my $r2 = qx{$changeAcces};
    }
    return($error);
}




my $fct="main";
creeRepertoires();
lisConfigDb();
my $retour = saisieParametres();
($retour == 0)? exit(1):();
my $ficLogCreation = $repertoireLog."/".$instance."_CRE_".$suffixe.".log";
open(LOG,">$ficLogCreation")or die "ERREUR ouverture fichier :".$ficLogCreation.": $!";
ecrisEnteteLog();
verifieUser($compteService);
ecrisLog($fct,"Port disponible affecte",$portEcoute,"");
enregistreFichierConfig(\%dbh);
relivreFichier($fic_in_cfgdb,$fic_out_cfgdb);
my $nomService = $prefixeService.$instance;
my $repData = $repertoireData."/".$instance;
my $repLog = $repertoireLog."/".$instance;
packages();
my $r1 = genereFichierService($instance);
($r1 > 0)? exit(1):();
my $r2 = creationRep($repertoireLog,$instance);
my $r3 = creationRep($repertoireConfig,$instance);
my $r4 = initialisationInstance($instance);
my $r5 = modifieConfig($instance,"postgresql.conf");
my $r6 = modifieConfig($instance,"pg_hba.conf");
my $r7 = modifieConfigInstance($instance);
positionneAcces($repertoireConfig."/".$instance,$compteService,$groupService,"775");
my $r8 = demarreInstance($instance);
my $r9 = setupPowa($instance,$portEcoute);
print("Resultats:$r1:$r2:$r3:$r4:$r5:$r6:$r7:$r8:$r9\n");
ecrisFinLog();
printf("Operation terminee, c.f. fichier : %s : pour le detail des opérations\n",$ficLogCreation);
close(LOG);
imprimeSynthese();
#-------------------------------------------------------------#
#   Fin du programme                                          #
#-------------------------------------------------------------#


